#! /usr/bin/env python
#
#  Verify the an AJB/AAA file does not have any
#  missing data that we might expect it to have.
#  Basicly verify that I have entered data correctly
#  for those fields which are not checked at entry.
#
'''Verify that we can parse the page number, pagination string,
and reviewers correctly.  These fields are not check at entry time.
They have also been updated and reformated over the course of the
project.  Thus they need to be checked.
'''

import argparse

from pprint import pprint

import aabooks.lib.utils as aautils
import aabooks.lib.pagination_xml as pg

import aabooks.ajbbook.bookfile as bf

__DESCRIPTION__ = '''Verify AJB entries for fields that are not parsed at entry time.'''

def getargs():
    '''Get the command line arguments and files to test.'''

    parser = argparse.ArgumentParser(description=__DESCRIPTION__)

    aautils.standard_parser_args(parser)

    parser.add_argument('-C', '--count', type=int,
                        metavar='COUNT',
                        default=-1,
                        help='check only the first COUNT objects,')

    parser.add_argument('ajbfiles',
                        help='a list of files to check',
                        nargs='*',
                        action='append')

    args = parser.parse_known_args()[0]

    return args


def main():
    '''The main function that tests AJB files for some consistency.'''
    # get command line
    args = getargs()
    if args.verbose:
        pprint(args)

    # open xml file to bookfile
    # for each entry
    #
    for ajbfile in args.ajbfiles[0]:

        bookfile = bf.BookFile()
        bookfile.set_filename(ajbfile)
        bookfile.read_file_xml()

        for count, entry in enumerate(bookfile):
            # this mess is because BookFile(entrylist)
            # has the header as the first item in the list
            if count == 0:
                continue

            entryindex = entry.num_str()

            #   page numbers, AJB only, is page number -1
            if entry['Num']['pageNum'] == -1:
                print(count, entryindex, 'has missing page number')

            # reviews, do they have a colon, i.e. have been checked for reviewer
            for review in entry['Reviews']:
                if ':' not in review:
                    print(count, entryindex, 'has missing review author')

            # pagination, can we parse it properly
            try:
                pg.pagination_string_to_xml(entry['Pagination'])
            except (KeyError, IndexError) as exp:
                print(count, entryindex, 'has unparsable pagination', exp)

            # 'translation of' in comments
            for comment in entry['Others']:
                if 'translation of' in comment:
                    print(count, entryindex, 'has translation of')

            if args.count != -1 and count >= args.count:
                break
            
        if args.verbose:
            print(ajbfile, 'done')
            
#
# Do the work
#
if __name__ == '__main__':

    main()
