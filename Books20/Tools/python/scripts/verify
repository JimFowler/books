#! /usr/bin/env python
#
#  Verify the an AJB/AAA file does not have any
#  missing data that we might expect it to have.
#  Basicly verify that I have entered data correctly
#  for those fields which are not checked at entry.
#
'''Verify that we can parse the page number, pagination string,
and reviewers correctly.  These fields are not check at entry time.
They have also been updated and reformated over the course of the
project.  Thus they need to be checked.
'''

import argparse

from pprint import pprint

import isbnlib as isbn

import aabooks.lib.utils as aautils
import aabooks.lib.pagination_xml as pg

import aabooks.ajbbook.bookfile as bf


__DESCRIPTION__ = '''Verify AJB entries for fields that are not parsed at entry time.'''

def getargs():
    '''Get the command line arguments and files to test.'''

    parser = argparse.ArgumentParser(description=__DESCRIPTION__)

    aautils.standard_parser_args(parser)

    parser.add_argument('-C', '--count', type=int,
                        metavar='COUNT',
                        default=-1,
                        help='check only the first COUNT objects,')

    parser.add_argument('--translation',
                        default=True,
                        action='store_false',
                        help='skip the test for "translation of"')

    parser.add_argument('--pagenumber',
                        default=True,
                        action='store_false',
                        help='skip the test for valid page number')

    parser.add_argument('--pagination',
                        default=True,
                        action='store_false',
                        help='skip the test of the pagination string')

    parser.add_argument('--tafeln',
                        default=True,
                        action='store_false',
                        help='skip the test of plates or tafeln in pagination string')

    parser.add_argument('--review', '--reviews',
                        default=True,
                        action='store_false',
                        help='skip the test for review authors')

    parser.add_argument('--isbn',
                        default=True,
                        action='store_false',
                        help='skip the test for ISBN numbers')

    parser.add_argument('ajbfiles',
                        help='a list of files to check',
                        nargs='*',
                        action='append')

    args = parser.parse_known_args()[0]

    return args


def test_for_page_number(args, count, entry, old_page_number):
    '''Test the page number for existence and monotonically increasing value.'''
    entryindex = entry.num_str()
    # page numbers, AJB only, is page number -1
    if args.pagenumber:
        page_number = entry['Num']['pageNum']
        if  page_number == -1:
            print(count, entryindex, 'has missing page number')
        else:
            # test for non-decreasing page numbers
            if page_number < old_page_number:
                print(count, entryindex, 'non-sequential page number')
        old_page_number = page_number

    return old_page_number


def test_for_pagination(args, count, entry):
    '''test the pagination, can we parse it properly?'''
    entryindex = entry.num_str()
    if args.pagination:
        try:
            pg.pagination_string_to_xml(entry['Pagination'])
        except (KeyError, IndexError) as exp:
            print(count, entryindex, 'has unparsable pagination', exp)


def test_for_tafeln(args, count, entry):
    '''Test for the presence of an indicator for Tafeln.'''
    entryindex = entry.num_str()
    test_str = entry['Pagination']
    if args.tafeln:
        for test_char in ['T', 't', 'P']:
            if test_char in test_str:
                print(count, entryindex, 'has', test_char)


def test_for_translation(args, count, entry):
    '''Test for 'translation of' in comments.'''
    entryindex = entry.num_str()
    if args.translation:
        for comment in entry['Others']:
            if 'translation of' in comment:
                print(count, entryindex, 'has translation of')

                
def test_for_reviewers(args, count, entry):
    '''Test the reviews, do they have a colon, i.e. have been checked for reviewer.'''
    entryindex = entry.num_str()
    if args.review:
        for review in entry['Reviews']:
            if ':' not in review:
                print(count, entryindex, 'has missing review author')

def test_for_isbn(args, count, entry):
    '''Test the ISBN numbers if they exists, do they have the proper checksum'''
    entryindex = entry.num_str()
    if args.isbn:
        for comment in entry['Others']:
            if comment and 'ISBN' in comment:
                isbnstrs = isbn.get_isbnlike(comment)
                if not isbnstrs:
                       print(count, entryindex, 'has no ISBN like numbers:', comment)
                       continue
                   
                for isbnstr in isbnstrs:
                      if not isbn.is_isbn10(isbnstr) and \
                         not isbn.is_isbn13(isbnstr):
                       print(count, entryindex, 'has invalid ISBN:', isbnstr)

def main():
    '''The main function that tests AJB files for some consistency.'''
    # get command line
    args = getargs()
    if args.verbose:
        pprint(args)

    # open xml file to bookfile
    # for each entry
    #
    for ajbfile in args.ajbfiles[0]:

        old_page_number = -1
        bookfile = bf.BookFile()
        bookfile.set_filename(ajbfile)
        bookfile.read_file_xml()

        for count, entry in enumerate(bookfile):

            entry_count = count + 1
            old_page_number = test_for_page_number(args, entry_count,
                                                   entry, old_page_number)

            test_for_pagination(args, entry_count, entry)
            #test_for_tafeln(args, count, entry)
            #test_for_translation(args, count, entry)
            test_for_reviewers(args, entry_count, entry)
            test_for_isbn(args, entry_count, entry)

            # are we done yet?
            if count >= args.count - 1:
                break
            
        if args.verbose:
            print(ajbfile, 'done')

#
# Do the work
#
if __name__ == '__main__':

    main()
