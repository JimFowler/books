#! /usr/bin/env python3
# -*- mode: Python;-*-
#
# Begin copyright
#
#  /home/jrf/Documents/books/Books20/Tools/python/aaaconvert.py
#
#   Part of the Books20 Project
#
#   Copyright 2020 James R. Fowler
#
#   All rights reserved. No part of this publication may be
#   reproduced, stored in a retrival system, or transmitted
#   in any form or by any means, electronic, mechanical,
#   photocopying, recording, or otherwise, without prior written
#   permission of the author.
#
#
# End copyright
#
"""Convert aaaVVsSS.txt files to aaaVV_books.xml files for use
with ajbbooks.py and other xml parsers.

Convert in titles and comments
 'No;_' to 'Nr. '
 'No._' to 'Nr. '
 '_-_' to '--'   en-dash
 '_-' to '---'  em-dash
 'Vol._' to 'Volume '
 '_' to ''  remove underscores
"""
import sys
import os
import argparse
import itertools
import re
from pprint import pprint

from nameparser import HumanName

from aabooks.ajbbook import bookfile as bf
from aabooks.ajbbook import ajbentry


__VERSION__ = '1.0'
__DESCRIPTION__ = '''Convert an aaa??s??.txt to an aaa??s??_books.xml file'''
#
# Parse the command line arguments
#
def getargs():
    """Parse the command line arguments."""

    parser = argparse.ArgumentParser(description=__DESCRIPTION__)

    parser.add_argument('-V', '--version',
                        help='provide version info,',
                        action='store_true')

    parser.add_argument('--verbose',
                        help='provide useful info,',
                        action='store_true')

    parser.add_argument('filename',
                        type=str,
                        action='append',
                        nargs='*',
                        help='read the file INPUT for entries')

    args = parser.parse_args()


    if args.version:
        print('aaconvert: version {}'.format(__VERSION__))
        sys.exit(0)

    return args


def clean_str(dirty_str):
    '''Replace some common sub-strings with my strings.'''

    tmp_str = dirty_str
    tmp_str = tmp_str.replace('No;_', 'Nr. ')
    tmp_str = tmp_str.replace('No._', 'Nr. ')
    tmp_str = tmp_str.replace('_-_', '–')
    tmp_str = tmp_str.replace('_-', '—')
    tmp_str = tmp_str.replace('Vol._', 'Volume ')
    tmp_str = tmp_str.replace('_', ' ')

    return tmp_str

def parse_authors(entry, author_str):
    '''Parse the author/editor string and place the result in the AJBentry
    entry. If this is a single editor, then (ed.) will be at the end
    of the string. If there are multiple editors, then (eds.) will be
    at the end of the string. Names are separated by spaces with all
    but the last name having a trailing comma. Initials and last names
    are separated by an underbar.  These names need to go in the
    Author or Editor field of the AJBentry.

    '''

    names = author_str.split(' ')

    if names[-1] == '(ed.)' or names[-1] == '(eds.)':
        field = entry['Editors']
        names.pop(-1)
    else:
        field = entry['Authors']

    namelist = []
    for name in names:
        rname = name.replace('_', ' ').strip(',')
        namelist.append(HumanName(rname))

    field.extend(namelist)

def parse_title(entry, title_str):
    '''Parse the title string and add to entry['Title'].

    '''

    #title_str = title_str.replace('.', ';').rstrip(';')
    entry['Title'] = clean_str(title_str).rstrip('.')

def parse_publishing(entry, pub_str):
    '''Place the source information in the comment field
    for now.  Parse by hand unless we can work out how to
    parse this string automatically.

    split on '.', if string contains ':' split on ',' to ['place:pub',
    'page']. In 'page' replace '_' with ''.  put 'place:pub' in
    publisher, 'page' in pagination, and everything else in Others
    '''

    entry['Others'].append(clean_str(pub_str))

def parse_year(entry, year_str):
    '''Parse the copyright year from the year string and
    put in entry['Year'].

    '''

    entry['Year'] = year_str.strip()

def parse_keywords(entry, keyword_str):
    '''Parse the keywords from the keyword_str and put into the new
    entry['Keywords'].  Need to add keywords to the definition of
    AJBentry.

    '''
    entry['Keywords'] = [] # remove this line when ajbentry is updated
    keywords = keyword_str.split(',')
    for k in keywords:
        entry['Keywords'].append(k.strip())


aaa_re = re.compile(r'^AAA(\d+)\.(\d+)\.(\d+)([a-z]{0,1})$')
def parse_aaanum(entry, num_str):
    '''Parse the AAA number out of numstr and put the parts
    into entry['Num'].

    '''

    items = aaa_re.split(num_str)
    num = entry['Num']
    num['volume'] = 'AAA'
    num['volNum'] = int(items[1])
    num['sectionNum'] = int(items[2])
    num['subsectionNum'] = 0
    num['entryNum'] = int(items[3])
    num['entrySuf'] = items[4]


def parse_j_key(entry, j_str):
    '''The 'j' key contain a 7-bit clean ASCII version of the
    author/editor names.  The names in the author field
    are in ISO-8859-1 encoding.  Since we use UTF-8 we
    don't need to keep this data.

    '''

    entry['jstr'] = j_str.strip()

def parse_m_key(entry, m_str):
    '''This field contains alternate spellings of the author/editor names.
    We should keep these data for use in the database searches.

    '''
    entry['Others'].append('alternate spellings: ' + m_str.strip())

def parse_b_key(entry, b_str):
    '''This field is the ADS bibcode for the entry, if one exists.
    Normally bibcodes are assigned to journal articles and these
    journal entries will need to be dropped from the XML file. But
    there are some books with bibcode entries as well, so inspect them
    by hand.

    '''
    entry['Others'].append(b_str.strip())

def parse_l_key(entry, l_str):
    '''This field is a coded link to available databases that contain
    further information.  These linke do not contain the actually link
    information and so we drop these data.

    '''

    entry['lstr'] = l_str.strip()

def parse_plus_key(entry, plus_str):
    '''This fields appears to be the 'see also' type information as it
    typically contains an AAA entry value.  We keep this information
    until we can determine what it is.

    '''
    entry['Others'].append('see also ' + plus_str.strip())

#
# This dict is the lookup from the key to the parser function.
# All functions take the arguments (entry, keystring)
#
_KEY_FUNCTIONS = {
    'a' : parse_authors,
    't' : parse_title,
    's' : parse_publishing,
    'y' : parse_year,
    'k' : parse_keywords,
    'n' : parse_aaanum,
    'j' : parse_j_key,
    'b' : parse_b_key,
    'm' : parse_m_key,
    'l' : parse_l_key,
    '+' : parse_plus_key,
    }

def main():

    '''For every line in the file, create a dictionary of key - keyvalue.
    Then parse the dictionary and convert the fields to an AJBentry
    type.  Added the temporary entry to a bookfile list. Finally write
    the bookfile as an XML file.

    '''

    args = getargs()

    if args.verbose:
        pprint(args)

    # set up required data structures and variables
    # generate the output file name and add to bf.
    bookfile = bf.BookFile()
    bookfile.set_header('''

Save as Unicode UTF-8 text encoding. Skip section 4 in Part 1

For volume AAA ?? Index to the Literature of ????, started, finished, proofread


''')
    fname = None

    for fname in args.filename[0]:
        with open(fname, 'r', encoding='ISO-8859-1') as fptr:
            lines = fptr.readlines()
            count = 0
            for line in lines:
                count += 1
                tmp_entry = ajbentry.AJBentry()
                tmp_entry['OrigStr'] = line

                # convert the line to a dictionary
                elements = line.strip().split('|')

                # convert the list of elements to a dictionary
                del elements[0]
                element_dict = dict(itertools.zip_longest(*[iter(elements)] * 2, fillvalue=""))

                # convert element dictionary by keys to an AJBentry
                for key in element_dict.keys():
                    try:
                        _KEY_FUNCTIONS[key](tmp_entry, element_dict[key])
                    except KeyError:
                        print('Unknown key: {} entry num {}\n  {}'.format(key, count,
                                                                      element_dict[key]))

                bookfile.set_new_entry(tmp_entry)

    if fname is not None:
        bname = os.path.basename(fname)
        name = os.path.splitext(bname)
        bookfile.write_file_xml(name[0][0:5] + '_books.xml')

#
# Main work
#
if __name__ == '__main__':

    main()
