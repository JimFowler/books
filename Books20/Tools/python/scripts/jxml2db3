#! /usr/bin/env python
## -*- mode: Python;-*-
## Begin copyright
##
##  /home/jrf/Documents/books/Books20/Tools/python/scripts/jxml2db3
##
##   Part of the Books20 Project
##
##   Copyright 2020 James R. Fowler
##
##   All rights reserved. No part of this publication may be
##   reproduced, stored in a retrival system, or transmitted
##   in any form or by any means, electronic, mechanical,
##   photocopying, recording, or otherwise, without prior written
##   permission of the author.
##
##
## End copyright


'''Convert a journal file from XML to an sqlite3 database.  We use
the JournalEntry class to convert from XML to a python
data object.  Then we add this entry to the database.  Each
JournaEntry is of the form

..code:: python

  {'Abbreviations': ['Ark Mat Astr Fys'],
   'Comments': ['first comment', 'second comment'],
   'Designators': {'ADS': 'ArMAF', 'ISSN' : '12345'},
   'Publishers': [{'Place': 'Stockholm', 'Publisher' : 'A Great Publisher'}],
   'Title': 'Arkiv f√∂r Matematik, Astronomi och Fysik',
   'endDate': '1945',
   'linknext': [12],
   'linkprevious': [10, 9],
   'startDate': '1901',
   'subTitle': '',
   'subsubTitle': ''}

'''
import os, sys
import argparse
import datetime as dt
import sqlite3
from aabooks.journal import journalfile as jf

from pprint import pprint


def getargs():
    '''Get the command line arguments.'''
    parser = argparse.ArgumentParser(description='Convert a journals.xml to a sqlite3 database file')

    parser.add_argument('--version',
                        action='version',
                        version='%(prog) s v1.0 dtd 25 April 2020')


    parser.add_argument('--verbose',
                        help='be noisy about our actions',
                        default=False,
                        action='store_true')
    
    parser.add_argument('--debug',
                        help='print out debugging information',
                        default=0,
                        action='store')
    
    parser.add_argument('-i', '--input', type=str,
                        help='read the xml file INPUT for entries',
                        default='/home/jrf/Documents/books/Books20/Data/journals.xml')

    parser.add_argument('-d', '--database', type=str,
                        help='the database to write into',
                        default='/home/jrf/Documents/books/Books20/Data/Journals.db3')
    
    args = parser.parse_args()

    return args



def insert_title(connection, title, parent, level):

    if title:
        connection.execute('INSERT INTO Journals (Title, ParentId, TitleLevel) VALUES (?, ?, ?);', (title, parent, level))
        
def get_title(connection, title):

    return connection.execute('SELECT * FROM Journals WHERE Title=?;', (title,))


def insert_abbreviations(connection, jid, abbrevs):
    '''abbrevs are a list of strings.'''

    for abrv in abbrevs:
        insert_title(connection, abrv, jid, -1)
    
def insert_info(connection, journalId, startT, endT):

    if startT:
        connection.execute('INSERT INTO JournalInfo (JournalId, DateStamp, RefType) VALUES (?, ?, ?);', (journalId, startT, 'Start'))

    if endT:
        connection.execute('INSERT INTO JournalInfo (JournalId, DateStamp, RefType) VALUES (?, ?, ?);', (journalId, endT, 'End'))

    
def insert_designators(connection, jid, desig):
    '''desig is a dictionary of key:value.'''
    
    for key, value in desig.items():
        connection.execute('INSERT INTO JournalDesignator (JournalId, KeyName, KeyValue) VALUES (?, ?, ?);', (jid, key, value))

    
def insert_comments(connection, jid, comments):
    '''comments are a list of strings.'''

    for c in comments:
        connection.execute('INSERT INTO JournalComments (JournalId, Comment) VALUES (?, ?);', (jid, c))


# don't know how to do these two yet
def insert_links(connection, jid, links, reftype):
    '''Links are a list of journal names.'''
    
    for l in links:
        print('insert_links:', l, type)
    

def insert_journal_publishers(connection, jid, pid, place=None, start=None, end=None, comment=None):
    '''Add a JournalId, PublisherId with a start/end date, place, and a comment
    to the JournalPublisher table. The minimum pieces of information are jid and pid.

    '''
    pass


def insert_publishers(connection, jid, publishers):
    '''Publishers is a list of dictionaries with a place, name,
    start date, and end date.  The Publisher name should 
    go into the publisher table. The place, start date, and
    end date should go into a title-publisher table.'''

    # if publisher exists, don't insert, return pid value
    # else insert new publisher, return pid value
    pass

def insert_todo(connection, summary, task):
    '''Use current time for DateOfEntry'''

    startdt = dt.datetime.now()
    connection.execute('INSERT INTO ToDo (Summary, Task, DateOfEntry) VALUES (?, ?, ?);', (summary, task,startdt))
    


def write_db3_file(self, connection, debug=0, verbose=False):

    # we don't have to write the file header
    # We assume the database is open already through the connection
    # and also that the database may have existing entries already.
    # This was not the case with the XML files
    
    for entry in self._entry_list:
        insert_db3_from_entry(entry, connection, debug, verbose)

        
def insert_db3_from_entry(self, connection, debug=0, verbose=False):
    '''Insert a journal entry into a sqlite3 database. We are assuming
    that the entry does not exist and that we can freely insert it.
    Use update_db3_from_entry() to perform an update.

    '''

    if not self.is_valid():
        return False

    if verbose:
        print('Working on Journal entry:')
        pprint(self)
        
    # Insert titles
    title = self.get('Title')
    insert_title(connection, title, 0, 0)
    connection.commit()

    
    # Find out what TitleIndex this entry was given
    JournalId = get_title(connection, title).fetchone()[0]

    connection.execute('BEGIN TRANSACTION;')
    # Insert sub-titles and associate with the JournalId
    insert_title(connection, self.get('subTitle'), JournalId, 1)
            
    # Insert sub-sub-title and associate with the JournalId
    insert_title(connection, self.get('subsubTitle'), JournalId, 2)

    # Insert abbreviations and associate with the JournalId
    insert_abbreviations( connection, JournalId, self.get('Abbreviations'))

    # Insert publishers into Publisher table, if new publisher
    # get PublisherId
    # And create entry in JournalPublisher table associated
    # with the Place,  JournalId  and publisher Id
    insert_publishers(connection, JournalId, self.get('Publishers'))

    # Insert Start, End, Prev, Next, and Comments into JournalInfo table
    startT = self.get('startDate')
    endT = self.get('endDate')
    insert_info(connection, JournalId, startT, endT)

    # comments, linknext, linkprevious are multi-element lists
    insert_links(connection, JournalId, self.get('linknext'), 'next')
    insert_links(connection, JournalId, self.get('linkprevious'), 'previous')

    insert_designators(connection, JournalId, self.get('Designators'))
    insert_comments(connection, JournalId, self.get('Comments'))

    connection.execute('COMMIT TRANSACTION;')
    return True

    
def main():

    args = getargs()

    if args.debug:
        pprint(args)
    
    jfile = jf.JournalFile()
    jfile.read_xml_file(args.input)

    dbconnection = sqlite3.connect(args.database)

    write_db3_file(jfile, dbconnection)
    

        
        
#
# Main work
#
if __name__ == '__main__':

    main()
    
