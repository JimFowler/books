#! /usr/bin/env python
## -*- mode: Python;-*-
## Begin copyright
##
##  /home/jrf/Documents/books/Books20/Tools/python/scripts/jxml2db3
##
##   Part of the Books20 Project
##
##   Copyright 2020 James R. Fowler
##
##   All rights reserved. No part of this publication may be
##   reproduced, stored in a retrival system, or transmitted
##   in any form or by any means, electronic, mechanical,
##   photocopying, recording, or otherwise, without prior written
##   permission of the author.
##
##
## End copyright


'''Convert a journal file from XML to an sqlite3 database.  We use
the JournalEntry class to convert from XML to a python
data object.  Then we add this entry to the database.  Each
JournaEntry is of the form

..code:: python

  {'Abbreviations': ['Ark Mat Astr Fys'],
   'Comments': ['first comment', 'second comment'],
   'Designators': {'ADS': 'ArMAF', 'ISSN' : '12345'},
   'Publishers': [{'Place': 'Stockholm', 'Publisher' : 'A Great Publisher'}],
   'Title': 'Arkiv f√∂r Matematik, Astronomi och Fysik',
   'endDate': '1945',
   'linknext': [12],
   'linkprevious': [10, 9],
   'startDate': '1901',
   'subTitle': '',
   'subsubTitle': ''}

'''
import os, sys
import argparse

import sqlite3
from aabooks.journal import journalfile as jf

from pprint import pprint


def getargs():
    '''Get the command line arguments.'''
    parser = argparse.ArgumentParser(description='Convert a journals.xml to a sqlite3 database file')

    parser.add_argument('--version',
                        action='version',
                        version='%(prog) s v1.0 dtd 25 April 2020')


    parser.add_argument('--verbose',
                        help='be noisy about our actions',
                        default='false',
                        action='store_true')
    
    parser.add_argument('--debug',
                        help='print out debugging information',
                        default='false',
                        action='store_true')
    
    parser.add_argument('-i', '--input', type=str,
                        help='read the xml file INPUT for entries',
                        default='/home/jrf/Documents/books/Books20/Data/journals.xml')

    parser.add_argument('-d', '--database', type=str,
                        help='the database to write into',
                        default='/home/jrf/Documents/books/Books20/Data/Journals.db3')
    
    args = parser.parse_args()

    return args

def insert_title(connection, title, parent, level):

    if title:
        cmd = 'INSERT INTO Journals (Title, ParentId, TitleLevel) VALUES ("{}", {}, {});'.format(title, parent, level)
        #connection.execute(cmd)
        #connection.commit()
        print('insert_title;', cmd)

def insert_abbreviations(connection, jid, abbrevs):
    '''abbrevs are a list of strings.'''
    try:
        for abrv in abbrevs:
            insert_title(dbconn, abrv, JournalId, -1)
    except:
        pass
    
def insert_info(connection, journalId, startT, endT):

    cmd = 'INSERT INTO INFO (JournalId, StartDate, EndDate) VALUES ({}, {}, {});'.format(journalId, startT, endT)
    print('insert_info:', cmd)

def insert_publishers(connection, jid, publishers):
    '''Publishers is a list of dictionaries with a place, name,
    start date, and end date.  The Publisher name should 
    go into the publisher table. The place, start date, and
    end date should go into a title-publisher table.'''
    
    print('publishers:')
    pprint(publishers)        
    
def insert_links(connection, jid, links, type):
    '''Links are a list of journal names.'''
    
    try:
        for l in links:
            print('insert_links:', l, type)
    except:
        pass

    
def insert_designators(connection, jid, desig):
    '''desig is a dictionary of key:value.'''
    
    try:
        for key in desig.keys():
            print('insert_designator: "{}" : "{}"'.format(key, desig[key]))
    except:
        pass

def insert_comments(connection, jid, comments):
    '''comments are a list of strings.'''
    try:
        for c in comments:
            print('insert_comment:', c)
    except:
        pass

def write_db3_file(self, connection):

    # we don't have to write the file header
    # We assume the database is open already through the connection
    # and also that the database may have existing entries already.
    # This was not the case with the XML files
    count = 0
    for entry in self._entry_list:
        while count < 10:
            write_db3_from_entry(entry, connection, count)
            count += 1
            
def write_db3_from_entry(self, connection, count):
    '''Insert a journal entry into a sqlite3 database. We are assuming
    that the entry does not exist and that we can freely insert it.
    Use update_db3_from_entry() to perform an update.

    '''

    if not self.is_valid():
        return False

    
    #pprint(entry)
    # Insert titles
    insert_title(connection, self.get('Title'), 0, 0)

    # Find out what TitleIndex this entry was given
    cmd = 'SELECT * FROM Journals WHERE Journals.Title == "{}";'.format(self['Title'])
    #JournalId = connection.execute(cmd).fetchone()[0]
    JournalId = count
    print('Journal: ', JournalId)

    # Insert sub-titles and associate with the JournalId
    insert_title(connection, self.get('subTitle'), JournalId, 1)
            
    # Insert sub-sub-title and associate with the JournalId
    insert_title(connection, self.get('subsubTitle'), JournalId, 2)

    # Insert abbreviations and associate with the JournalId
    insert_abbreviations( connection, JournalId, self.get('Abbreviations'))

    # Insert publishers into Publisher table, if new publisher
    # get PublisherId
    # And create entry in JournalPublisher table associated
    # with the Place,  JournalId  and publisher Id
    insert_publishers(connection, JournalId, self.get('Publishers'))

    # Insert Start, End, Prev, Next, and Comments into JournalInfo table
    startT = self.get('startDate')
    endT = self.get('endDate')
    insert_info(connection, JournalId, startT, endT)

    # comments, linknext, linkprevious are multi-element lists
    insert_links(connection, JournalId, self.get('linknext'), 'next')
    insert_links(connection, JournalId, self.get('linkprevious'), 'previous')

    insert_designators(connection, JournalId, self.get('Designators'))
    insert_comments(connection, JournalId, self.get('Comments'))



    
def main():

    args = getargs()
    pprint(args)
    
    jfile = jf.JournalFile()
    jfile.read_xml_file(args.input)

    connection = sqlite3.connect(args.database)
    dbcursor = connection.cursor()

    write_db3_file(jfile, connection)
    

        
        
#
# Main work
#
if __name__ == '__main__':

    main()
    
