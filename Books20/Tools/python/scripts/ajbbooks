#! /usr/bin/env python3
# -*- mode: Python;-*-
#
# Begin copyright
#
#  /home/jrf/Documents/books/Books20/Tools/python/ajbbooks
#
#   Part of the Books20 Project
#
#   Copyright 2014 James R. Fowler
#
#   All rights reserved. No part of this publication may be
#   reproduced, stored in a retrival system, or transmitted
#   in any form or by any means, electronic, mechanical,
#   photocopying, recording, or otherwise, without prior written
#   permission of the author.
#
#
# End copyright
#
"""AJB/AAA dialog to review and edit books entries
"""

import sys
import os
import configargparse as argp
from PyQt5 import QtGui, QtWidgets

import aabooks.ajbbook.ajbwindow as mw
import aabooks.ajbbook.ajb_rc
import aabooks.lib.utils as aautils

from pprint import pprint

__VERSION__ = '2.0'

__DESCRIPTION__ = 'Create or edit an ajb??_books.xml file'
#
# Parse the command line arguments
#
def getargs():
    """Parse the command line arguments."""
    parser = argp.ArgumentParser(description=__DESCRIPTION__,
                                 default_config_files=['~/.config/Books20/ajbbooks.conf'])
                                 
    aautils.standard_parser_args(parser)
    
    parser.add_argument('-i', '--input', type=str,
                        help='read the file INPUT for entries')

    parser.add_argument('-s', '--symbols', type=str,
                        help='use alternate symbol table,')

    parser.add_argument('--volnum', type=str,
                        help='default volume number (default 1),')

    parser.add_argument('--volname', type=str,
                        help='volume number (default AJB),')

    return parser.parse_known_args()[0]


#
# The main body
#

def main():
    """Set up the windows and start the event loop for ajbbooks."""
    args = getargs()

    app = QtWidgets.QApplication(sys.argv)
    app.setApplicationName('AJB Book Entry')
    app.setWindowIcon(QtGui.QIcon(':/icon_ajb.svg'))

    form = mw.BookEntry()
    app.focusChanged.connect(form.set_focus_changed)

    if args.version:
        form.help_about()
        sys.exit()

    if args.volnum is not None:
        form.set_default_volume_number(args.volnum)
        form.new_entry()

    if args.volname is not None:
        form.set_default_volume_name(args.volname)
        form.new_entry()

    if args.symbols is not None:
        form.set_symbol_table_name(args.symbols)

    if args.input is not None:
        fname = args.input
        if os.path.isfile(fname):
            form.open_file(fname)
        else:
            form.bookfile.set_filename(fname)
            form.open_new_file()
            form.set_window_title(os.path.basename(form.bookfile.get_filename()))


    form.show()
    sys.exit(app.exec_())


if __name__ == '__main__':

    main()
